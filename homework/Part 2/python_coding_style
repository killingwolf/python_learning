Python 风格规范

1.每行不超过80个字符
    例外:
        长的导入模块语句
        注释里的URL
		

2.不要使用反斜杠连接行.
    （Python会将 圆括号, 中括号和花括号中的行隐式的连接起来 , 你可以利用这个特点. 
	 如果需要, 你可以在表达式外围增加一对额外的圆括号.）
	 

3.你应该要么垂直对齐换行的元素(见 行长度 部分的示例), 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):  
	   # Aligned with opening delimiter
	   foo = long_function_name(var_one, var_two,
                                var_three, var_four)

       # Aligned with opening delimiter in a dictionary
       foo = {
           long_dictionary_key: value1 +
                                value2,
           ...
       }

       # 4-space hanging indent; nothing on first line
       foo = long_function_name(
           var_one, var_two, var_three,
           var_four)

       # 4-space hanging indent in a dictionary
       foo = {
           long_dictionary_key:
               long_dictionary_value,
           ...
       }

	   
4.空格
    括号内不要有空格.
	不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).
	（在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, <, >, !=, <>, <=, >=, in, not in, is, is not), 布尔(and, or, not). 
	至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.）
	当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.
	不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等):
	

5.文档字符串
    函数：
        def fetch_bigtable_rows(big_table, keys, other_silly_variable=None):
            """Fetches rows from a Bigtable.
            
            Retrieves rows pertaining to the given keys from the Table instance
            represented by big_table.  Silly things may happen if
            other_silly_variable is not None.
            
            Args:
                big_table: An open Bigtable Table instance.
                keys: A sequence of strings representing the key of each table row
                    to fetch.
                other_silly_variable: Another optional variable, that has a much
                    longer name than the other args, and which does nothing.
            
            Returns:
                A dict mapping keys to the corresponding table row data
                fetched. Each row is represented as a tuple of strings. For
                example:
            
                {'Serak': ('Rigel VII', 'Preparer'),
                 'Zim': ('Irk', 'Invader'),
                 'Lrrr': ('Omicron Persei 8', 'Emperor')}
            
                If a key from the keys argument is missing from the dictionary,
                then that row was not found in the table.
            
            Raises:
                IOError: An error occurred accessing the bigtable.Table object.
            """
            pass
    
	类:
	    class SampleClass(object):
            """Summary of class here.
            
            Longer class information....
            Longer class information....
            
            Attributes:
                likes_spam: A boolean indicating if we like SPAM or not.
                eggs: An integer count of the eggs we have laid.
            """
            
            def __init__(self, likes_spam=False):
                """Inits SampleClass with blah."""
                self.likes_spam = likes_spam
                self.eggs = 0
            
            def public_method(self):
            """Performs operation blah."""
	    
		
6.命名

    应该避免的名称
        单字符名称, 除了计数器和迭代器.
        包/模块名中的连字符(-)
        双下划线开头并结尾的名称(Python保留, 例如__init__)
		
    命名约定
        所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.
        用单下划线(_)开头表示模块变量或函数是protected的(使用import * from时不会包含).
        用双下划线(__)开头的实例变量或方法表示类内私有.
        将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.
        【对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 
		尽管已经有很多现存的模块使用类似于CapWords.py这样的命名,但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.】
    
    Python之父Guido推荐的规范
        Type	             Public	                Internal
        Modules	             lower_with_under	    _lower_with_under
        Packages	         lower_with_under	     
        Classes	             CapWords	            _CapWords
        Exceptions	         CapWords	            
        Functions	         lower_with_under()	    _lower_with_under()
        Global/Class         Constants	            CAPS_WITH_UNDER	_CAPS_WITH_UNDER
        Global/Class         Variables	            lower_with_under	_lower_with_under
        Instance             Variables	            lower_with_under	_lower_with_under (protected) or __lower_with_under (private)
        Method Names	     lower_with_under()	    _lower_with_under() (protected) or __lower_with_under() (private)
        Function/Method      Parameters	            lower_with_under	 
        Local Variables	     lower_with_under        
	

	
7、我犯过的错误
    函数参数之间没加空格！
reference:
http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/python_style_rules/
http://www.douban.com/note/492336382/?qq-pf-to=pcqq.c2c